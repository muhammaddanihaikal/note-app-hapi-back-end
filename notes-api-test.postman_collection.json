{
  "info": {
    "_postman_id": "b9e82c45-8a34-4868-839d-349287d50f7f",
    "name": "Notes API Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Adding Notes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Skenario 1: Adding Notes\r",
              "// 1.Pastikan response memiliki status code 201.\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json.\r",
              "// 3.Pastikan body response adalah object.\r",
              "// 4.Pastikan body response memiliki properti dan nilai yang sesuai.\r",
              "// 5.Pastikan data pada response body memiliki noteId dan nilainya tidak kosong.\r",
              "\r",
              "// 1.Pastikan response memiliki status code 201.\r",
              "pm.test('response status code should have 201 value', () => {\r",
              "   pm.response.to.have.status(201);\r",
              "}); \r",
              "\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json.\r",
              "pm.test('response Content-Type header should have application/json value', () => {\r",
              "  pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
              "});\r",
              "\r",
              "// 3.Pastikan body response adalah object.\r",
              "pm.test('response body should an object', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "}); \r",
              "\r",
              "// 4.Pastikan body response memiliki properti dan nilai yang sesuai.\r",
              "pm.test('response body should have correct property and value', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.ownProperty('status');\r",
              "    pm.expect(responseJson.status).to.equals('success');\r",
              "\r",
              "    pm.expect(responseJson).to.ownProperty('message');\r",
              "    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');\r",
              "    \r",
              "    pm.expect(responseJson).to.ownProperty('data');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 5.Pastikan data pada response body memiliki noteId dan nilainya tidak kosong.\r",
              "pm.test('response body data should have noteId property and not equal to empty', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "    const { data } = responseJson;\r",
              " \r",
              "    pm.expect(data).to.ownProperty('noteId');\r",
              "    pm.expect(data.noteId).to.not.equals('');\r",
              " \r",
              "    pm.environment.set('noteId', data.noteId);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n   \"title\": \"Catatan A\",\r\n   \"tags\": [\"Android\", \"Web\"],\r\n   \"body\": \"Isi dari catatan A\"\r\n} ",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/notes",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["notes"]
        }
      },
      "response": []
    },
    {
      "name": "Getting All Notes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Skenario Getting All Notes\r",
              "\r",
              "// 1.Pastikan response memiliki status code 200.\r",
              "pm.test('response status code should have 200 value', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json.\r",
              "pm.test('response Content-Type header should have application/json value', () => {\r",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
              "});\r",
              "\r",
              "// 3.Pastikan body response adalah object.\r",
              "pm.test('response body should an object', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 4.Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.\r",
              "pm.test('response body should have the correct property and value', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.ownProperty('status');\r",
              "    pm.expect(responseJson.status).to.equals('success');\r",
              "\r",
              "    pm.expect(responseJson).to.ownProperty('data');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 5.Pastikan data pada response body memiliki array notes dan terdapat minimal 1 item di dalamnya.\r",
              "pm.test('response body data should have a notes array and contain at least 1 item', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "    const { data } = responseJson;\r",
              "\r",
              "    pm.expect(data).to.have.ownProperty('notes');\r",
              "    pm.expect(data.notes).to.be.an('array');\r",
              "    pm.expect(data.notes).lengthOf.at.least(1);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/notes",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["notes"]
        }
      },
      "response": []
    },
    {
      "name": "Getting Specified Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Getting Specified Note Test\r",
              "\r",
              "// 1.Pastikan response memiliki status code 200.\r",
              "pm.test('Pastikan response memiliki status code 200', ()=>{\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json value\r",
              "pm.test('response Content-Type header should have application/json value', () => {\r",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
              "});\r",
              "\r",
              "// 3.Pastikan body response merupakan object.\r",
              "pm.test('response body should be an object', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 4.Pastikan body response memiliki properti dan nilai atau tipe data yang sesuai.\r",
              "pm.test('response body should have the correct property and value', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "\r",
              "    pm.expect(responseJson).to.have.ownProperty('status');\r",
              "    pm.expect(responseJson.status).to.equals('success');\r",
              "\r",
              "    pm.expect(responseJson).to.have.ownProperty('data');\r",
              "    pm.expect(responseJson.data).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 5.Pastikan data pada response body memiliki properti note yang merupakan sebuah objek.\r",
              "pm.test('response body data should contain note object', ()=>{\r",
              "    const responseJson = pm.response.json();\r",
              "    const { data } = responseJson;\r",
              "\r",
              "    pm.expect(data).to.have.ownProperty('note');\r",
              "    pm.expect(data.note).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 6.Pastikan objek note di dalam data memiliki properti id, title, body, dan tags dengan nilai yang sesuai.\r",
              "pm.test('note object should contain correct value for id, title, body, and tags property',() => {\r",
              "    const responseJson = pm.response.json();\r",
              "    const { data: { note } } = responseJson;\r",
              "\r",
              "    const expectedId = pm.environment.get('noteId');\r",
              "    const expectedTitle = 'Catatan A';\r",
              "    const expectedTags = [\"Android\", \"Web\"];\r",
              "    const expectedBody = 'Isi dari catatan A';\r",
              "\r",
              "    pm.expect(note).to.have.ownProperty('id');\r",
              "    pm.expect(note.id).to.equals(expectedId);\r",
              "\r",
              "    pm.expect(note).to.have.ownProperty('title');\r",
              "    pm.expect(note.title).to.equals(expectedTitle);\r",
              "\r",
              "    pm.expect(note).to.have.ownProperty('tags');\r",
              "    pm.expect(note.tags).to.eql(expectedTags);\r",
              "\r",
              "    pm.expect(note).to.have.ownProperty('body');\r",
              "    pm.expect(note.body).to.equals(expectedBody);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/notes/{{noteId}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Update Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Skenario Update Note\r",
              "\r",
              "// 1.Pastikan response memiliki status code 200.\r",
              "pm.test('response status code should have 200 value', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json.\r",
              "pm.test('response Content-Type header should have application/json value', () => {\r",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
              "});\r",
              "\r",
              "// 3.Pastikan body response adalah object.\r",
              "pm.test('response body should be an object', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 4.Pastikan body response memiliki properti dan nilai yang sesuai.\r",
              "pm.test('response body should have correct property and value', () => {\r",
              "   const responseJson = pm.response.json();\r",
              " \r",
              "   pm.expect(responseJson).to.have.ownProperty('status');\r",
              "   pm.expect(responseJson.status).to.equals('success');\r",
              "   pm.expect(responseJson).to.have.ownProperty('message');\r",
              "   pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');\r",
              "});\r",
              "\r",
              "// 5.Ketika mengakses catatan yang diperbaharui, Pastikan catatan yang diperbarui memiliki nilai terbaru.\r",
              "pm.test('when request the updated note', () => {\r",
              "    const noteId = pm.environment.get('noteId');\r",
              "\r",
              "    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response) => {\r",
              "        if(!error){\r",
              "            pm.test('then the updated note should contain the latest data', ()=> {\r",
              "                const responseJson = pm.response.json();\r",
              "                const { data: { note } } = responseJson;\r",
              "\r",
              "                const expectedTitle = 'Catatan A Revised';\r",
              "                const expectedTags = ['Android', 'Web'];\r",
              "                const expectedBody = 'Isi dari Catatan A Revised';\r",
              "\r",
              "                pm.expect(note.title).to.equals(expectedTitle);\r",
              "                pm.expect(note.tags).to.eql(expectedTags);\r",
              "                pm.expect(note.body).to.equals(expectedBody);\r",
              "            });\r",
              "        }\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"title\": \"Catatan A Revised\",\r\n    \"tags\": [\"Android\", \"Web\"],\r\n    \"body\": \"Isi dari Catatan A Revised\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:5000/notes/{{noteId}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    },
    {
      "name": "Delete Note",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Skenario Delete Note\r",
              "\r",
              "// 1.Pastikan response memiliki status code 200.\r",
              "pm.test('response status code should have 200 value', () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "// 2.Pastikan header response Content-Type memiliki nilai application/json.\r",
              "pm.test('response Content-Type header should have application/json value', () => {\r",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.equals('application/json; charset=utf-8');\r",
              "});\r",
              "\r",
              "// 3.Pastikan body response adalah object.\r",
              "pm.test('response body should be an object', () => {\r",
              "    const responseJson = pm.response.json();\r",
              "    pm.expect(responseJson).to.be.an('object');\r",
              "});\r",
              "\r",
              "// 4.Pastikan body response memiliki properti dan nilai yang sesuai.\r",
              "pm.test('response body should have correct property and value', () => {\r",
              "   const responseJson = pm.response.json();\r",
              " \r",
              "   pm.expect(responseJson).to.have.ownProperty('status');\r",
              "   pm.expect(responseJson.status).to.equals('success');\r",
              "   pm.expect(responseJson).to.have.ownProperty('message');\r",
              "   pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');\r",
              "});\r",
              "\r",
              "// 5.Ketika mengakses catatan yang dihapus, Pastikan catatan yang dihapus tidak ditemukan.\r",
              "pm.test('when request the deleted note', ()=>{\r",
              "    const noteId = pm.environment.get('noteId');\r",
              "\r",
              "    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, ()=>{\r",
              "        pm.test('the deleted note should be not found',(error,response) => {\r",
              "            if(!error){\r",
              "                pm.expect(response.code).to.equals(404);\r",
              "\r",
              "                const responseJson = pm.response.json();\r",
              "                pm.expect(responseJson.status).to.equals('fail');\r",
              "                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan')\r",
              "            }\r",
              "        });\r",
              "    });\r",
              "    \r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:5000/notes/{{noteId}}",
          "protocol": "http",
          "host": ["localhost"],
          "port": "5000",
          "path": ["notes", "{{noteId}}"]
        }
      },
      "response": []
    }
  ]
}
